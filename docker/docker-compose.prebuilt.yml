version: '3.8'

# Pre-built image approach (no local building)
# Usage: docker-compose -f docker-compose.prebuilt.yml up -d

services:
  # PostgreSQL Database  
  postgres:
    image: postgres:15-alpine
    container_name: email-generator-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: email_generator
      POSTGRES_USER: email_user
      POSTGRES_PASSWORD: secure_email_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - email-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U email_user -d email_generator"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # FastAPI Application (using base Python image + volume mount)
  app:
    image: python:3.11-slim
    container_name: email-generator-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: email_generator
      DB_USER: email_user
      DB_PASSWORD: secure_email_password_123
      
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_MODEL: gpt-4o-mini
      OPENAI_MAX_TOKENS: 1000
      OPENAI_TEMPERATURE: 0.7
      
      # Email Processing Configuration
      BATCH_SIZE: 100
      MAX_CSV_ROWS: 50000
      INTELLIGENCE_BATCH_SIZE: 5
      AI_FALLBACK_TO_TEMPLATE: "true"
      
      # Server Configuration
      HOST: 0.0.0.0
      PORT: 8000
      
      # Python settings
      PYTHONPATH: /app
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./logs:/app/logs
    working_dir: /app
    networks:
      - email-network
    command: >
      sh -c "
        apt-get update && 
        apt-get install -y --no-install-recommends build-essential libpq-dev curl &&
        pip install --no-cache-dir -r requirements.txt &&
        python init_database.py --setup &&
        uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local

networks:
  email-network:
    driver: bridge
