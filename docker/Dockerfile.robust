# Robust Dockerfile with network retry logic
FROM python:3.11-slim as builder

# Set working directory
WORKDIR /app

# Install system dependencies with retry logic and fix-missing
RUN apt-get update || (sleep 5 && apt-get update) && \
    apt-get install -y --no-install-recommends --fix-missing \
    build-essential \
    libpq-dev \
    ca-certificates \
    wget \
    curl \
    || (apt-get update --fix-missing && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    ca-certificates \
    wget \
    curl) && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies with retries
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir --retries 3 --timeout 60 -r requirements.txt

# Production stage
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install runtime dependencies with retry logic
RUN apt-get update || (sleep 5 && apt-get update) && \
    apt-get install -y --no-install-recommends --fix-missing \
    libpq5 \
    curl \
    ca-certificates \
    || (apt-get update --fix-missing && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    ca-certificates) && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/uploads /app/temp /app/logs

# Set permissions
RUN chown -R appuser:appuser /app && \
    chmod +x docker-entrypoint.sh

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Use entrypoint script
ENTRYPOINT ["./docker-entrypoint.sh"]

# Default command
CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]
